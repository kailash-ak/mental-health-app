{"ast":null,"code":"var _jsxFileName = \"C:\\\\mental-health-app\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const verifyAuth = async () => {\n    try {\n      const {\n        data\n      } = await axios.get('http://localhost:5000/auth/me', {\n        withCredentials: true,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      setUser(data.user);\n    } catch (error) {\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    verifyAuth();\n  }, []);\n  const login = async (email, password) => {\n    const {\n      data\n    } = await axios.post('http://localhost:5000/auth/login', {\n      email,\n      password\n    }, {\n      withCredentials: true\n    });\n    setUser(data.user);\n  };\n  const signup = async (name, email, password) => {\n    await axios.post('http://localhost:5000/auth/signup', {\n      name,\n      email,\n      password\n    }, {\n      withCredentials: true\n    });\n  };\n  const logout = async () => {\n    await axios.post('http://localhost:5000/auth/logout', {}, {\n      withCredentials: true\n    });\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      signup,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","verifyAuth","data","get","withCredentials","headers","error","login","email","password","post","signup","name","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/mental-health-app/client/src/context/AuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const verifyAuth = async () => {\r\n    try {\r\n      const { data } = await axios.get('http://localhost:5000/auth/me', {\r\n        withCredentials: true,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        }\r\n      });\r\n      setUser(data.user);\r\n    } catch (error) {\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    verifyAuth();\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    const { data } = await axios.post(\r\n      'http://localhost:5000/auth/login',\r\n      { email, password },\r\n      { withCredentials: true }\r\n    );\r\n    setUser(data.user);\r\n  };\r\n\r\n  const signup = async (name, email, password) => {\r\n    await axios.post(\r\n      'http://localhost:5000/auth/signup',\r\n      { name, email, password },\r\n      { withCredentials: true }\r\n    );\r\n  };\r\n\r\n  const logout = async () => {\r\n    await axios.post(\r\n      'http://localhost:5000/auth/logout',\r\n      {},\r\n      { withCredentials: true }\r\n    );\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, signup, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,+BAA+B,EAAE;QAChEC,eAAe,EAAE,IAAI;QACrBC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE;QACZ;MACF,CAAC,CAAC;MACFP,OAAO,CAACI,IAAI,CAACL,IAAI,CAAC;IACpB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdR,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDX,SAAS,CAAC,MAAM;IACdY,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,MAAM;MAAEP;IAAK,CAAC,GAAG,MAAMZ,KAAK,CAACoB,IAAI,CAC/B,kCAAkC,EAClC;MAAEF,KAAK;MAAEC;IAAS,CAAC,EACnB;MAAEL,eAAe,EAAE;IAAK,CAC1B,CAAC;IACDN,OAAO,CAACI,IAAI,CAACL,IAAI,CAAC;EACpB,CAAC;EAED,MAAMc,MAAM,GAAG,MAAAA,CAAOC,IAAI,EAAEJ,KAAK,EAAEC,QAAQ,KAAK;IAC9C,MAAMnB,KAAK,CAACoB,IAAI,CACd,mCAAmC,EACnC;MAAEE,IAAI;MAAEJ,KAAK;MAAEC;IAAS,CAAC,EACzB;MAAEL,eAAe,EAAE;IAAK,CAC1B,CAAC;EACH,CAAC;EAED,MAAMS,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,MAAMvB,KAAK,CAACoB,IAAI,CACd,mCAAmC,EACnC,CAAC,CAAC,EACF;MAAEN,eAAe,EAAE;IAAK,CAC1B,CAAC;IACDN,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAElB,IAAI;MAAEE,OAAO;MAAEQ,KAAK;MAAEI,MAAM;MAAEE;IAAO,CAAE;IAAAlB,QAAA,EACnEA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvB,EAAA,CAxDWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AA0DzB,OAAO,MAAM2B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMnC,UAAU,CAACM,WAAW,CAAC;AAAA;AAAC6B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}